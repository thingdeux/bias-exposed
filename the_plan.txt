bias_exposed
    requirements:
        Celery - For splitting off threads to do analysis
        Feedparser - Reading RSS Feeds
        BeautifulSoup - Parsing web pages
        South - For handling Django DB Migrations
        Numpy - Scientific computing
        nltk - Natural language processor

    Celery will split off threads and handle the processing of the data when the analysis is performed.
    Once the analysis is performed store the information in the DB and generate a slug for the story. Then Cache it.
    There should be no more than ~4 stories posted per day.
    Like words will be compared in one column .... opposite in another ... and outliers in yet another.


Basic Functionality Goal:    
    Scour a couple of big name news sites RSS feeds a couple times each day.
        Find the repeating political stories and/or stories that are big enough to persist for many hours.            
            Find the similarities and the differences in words used between sites.
            Use the A.P. and/or Reuters as a starting point to determine what the facts are.
            Find the outliers ... the words that were added to swing opinion one way or t'other.

django modules
    feed - Display/Storage of feeds    
    analyze - Language analysis and parsing


[Dev Notes]
Plan for finding the same story between sources. Matching will occur in 4 stages.

    [Each Match gets 4 points]
    Stage 1: Match like words from the title. 
    making sure to throw away common words like 'the' - 'and' - 'of' - etc.

    [Each Match gets 10 points]
    Stage 2: Exact quote match - Find the quotes from the story (text between "") and try matching them.
    
    [Each Match gets 6 points]
    Stage 3: Match exact sentences

    [Each Match gets 3 points]
    Stage 4: Token word match on the body of the story for the most recurring words.


[Natural language processing]
    (These will not be stored in the repo)
    [Natural-Language Corpus' used]
        stopwords - common english language words that should be filtered out (ex: if / that / between / in)
        wordnet - http://www.nltk.org/howto/wordnet.html (used for finding synonyms)


Some things to try:
    Lexical_Diversity (How many different words is the article using ... ie: Is the vocabulary broad or not)    
    FreqDist --Find the frequency of each word (unique) used in a string.

[DOM Discovery]
    Feeds will keep a table of DOM ID's for article body text.
    If an ID is no longer valid the feed will be flagged and not used until I correct it.